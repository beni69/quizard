generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model AuthUser {
    // required by lucia
    id           String        @id @unique
    auth_session AuthSession[]
    auth_key     AuthKey[]

    // custom user attributes
    email       String   @unique
    username    String   @unique
    displayName String
    avatar      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    likes    UserLikeOnLearningSet[]
    bookmarks UserBookmarkOnLearningSet[]
    reports  UserReportOnLearningSet[]

    createdSets LearningSet[]

    @@map("auth_user")
}

model AuthKey {
model AuthKey {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?

    auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
    auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model AuthSession {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt

    auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
    auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
    @@map("auth_session")
}

model LearningSet {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    publishedAt DateTime?

    name        String
    description String
    visibility  Visibility
    tags        String[]

    likes       UserLikeOnLearningSet[]
    bookmarks   UserBookmarkOnLearningSet[]
    reports     UserReportOnLearningSet[]

    cards Card[]

    authorId String
    author   AuthUser @relation(fields: [authorId], references: [id])
}

model Card {
    id String @id @default(cuid())

    term       String
    definition String

    learningSetId String
    learningSet   LearningSet @relation(fields: [learningSetId], references: [id])
}

enum Visibility {
    PUBLIC
    UNLISTED
    PRIVATE
}

// many to many relationship connectors
model UserLikeOnLearningSet {
    userId String
    user   AuthUser @relation(fields: [userId], references: [id])

    learningSetId String
    learningSet   LearningSet @relation(fields: [learningSetId], references: [id])

    @@id([userId, learningSetId])
}

model UserBookmarkOnLearningSet {
    userId String
    user   AuthUser @relation(fields: [userId], references: [id])

    learningSetId String
    learningSet   LearningSet @relation(fields: [learningSetId], references: [id])

    @@id([userId, learningSetId])
}

model UserReportOnLearningSet {
    createdAt DateTime @default(now())

    inapropriate Boolean
    privacy Boolean
    spam Boolean
    misleading Boolean
    copyright Boolean
    customReason String?

    learningSetId String
    learningSet   LearningSet @relation(fields: [learningSetId], references: [id])

    reporterId String
    reporter   AuthUser @relation(fields: [reporterId], references: [id])

    @@id([learningSetId, reporterId])
}